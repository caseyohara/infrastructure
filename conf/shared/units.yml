# Fleet
# Distribuited Scheduling Service
- name: fleet.service
  command: start
  drop-ins:
    - name: require-flannel.conf
      content: |
        [Unit]
        After=flanneld.service
        Requires=flanneld.service

- name: flanneld.service
  command: start
  drop-ins:
    - name: 30-unexpected-reboot-docker.conf
      content: |
        [Unit]
        Before=docker.service
        Wants=etcd.service
        After=etcd.service
    - name: 40-pull-image.conf
      content: |
        [Service]
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/flannel:${FLANNEL_VER}
    - name: 50-network-config.conf
      content: |
        [Service]
        ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "10.22.0.0/16" }'

# NTP Time Server Configuration
- name: ntpdate.service
  command: start

- name: timedate-ntp-synchronization.service
  command: start
  content: |
    [Unit]
    Description=Synchronize system clock
    After=ntpdate.service

    [Service]
    ExecStart=/usr/bin/timedatectl set-timezone UTC
    ExecStart=/usr/bin/timedatectl set-ntp true
    ExecStart=/sbin/hwclock --systohc --utc
    RemainAfterExit=yes
    Type=oneshot

# Preseed Docker Images on boot
- name: deis-preseed.service
  command: start
  content: |
    [Unit]
    Description=Preseed Docker Images
    After=docker.service
    Before=fleet.service

    [Service]
    ExecStartPre=/bin/bash -c '\
      DEIS_COMPONENTS=${DEIS_COMPONENTS:-} \
      IFS=' ' read -a list <<< "$DEIS_COMPONENTS" \
      for c in "${list[@]}"; do \
        image=`/run/deis/bin/get_image /deis/$c` \
        docker pull $image \
      done'

    ExecStart=/bin/true
    RemainAfterExit=yes
    Type=oneshot

# Pull latest services on boot
- name: refresh-infrastructure.service
  command: start
  content: |
    [Unit]
    Description=Refresh Deis Units

    [Service]
    ExecStartPre=/bin/sh -c "rm -rf /var/lib/infrastructure"
    ExecStartPre=/bin/sh -c "git clone https://github.com/brandfolder/infrastructure.git /var/lib/infrastructure"
    ExecStart=/bin/true
    RemainAfterExit=yes
    Type=oneshot

# Increase number of connections
- name: increase-nf_conntrack-connections.service
  command: start
  content: |
    [Unit]
    Description=Increase the number of connections in nf_conntrack. default is 65536

    [Service]
    Type=oneshot
    ExecStartPre=/usr/sbin/modprobe nf_conntrack
    ExecStart=/bin/sh -c "sysctl -w net.netfilter.nf_conntrack_max=262144"

- name: early-docker.service
  command: start
  drop-ins:
    - name: 00-require-var-lib-docker-mount.conf
      content: |
        [Unit]
        After=var-lib-docker.mount
        Requires=var-lib-docker.mount

# Format the docker volume
- name: format-docker-volume.service
  command: start
  content: |
    [Unit]
    Description=Formats the added EBS volume for Docker
    ConditionPathExists=!/etc/docker-volume-formatted

    [Service]
    Type=oneshot
    RemainAfterExit=yes
    ExecStart=/usr/sbin/wipefs -f /dev/xvdf
    ExecStart=/usr/sbin/mkfs.ext4 -i 4096 -b 4096 /dev/xvdf
    ExecStart=/bin/touch /etc/docker-volume-formatted

# Mount the docker volume
- name: var-lib-docker.mount
  command: start
  content: |
    [Unit]
    Description=Mount Docker volume to /var/lib/docker
    Requires=format-docker-volume.service
    After=format-docker-volume.service
    Before=early-docker.service

    [Mount]
    What=/dev/xvdf
    Where=/var/lib/docker
    Type=ext4