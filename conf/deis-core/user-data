#cloud-config
coreos:
  fleet:
    public-ip: $private_ipv4
    metadata: "type=core"
    etcd_request_timeout: 3.0

  etcd:
    discovery: {{discovery_url}}
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
    data-dir: /media/ephemeral/etcd
    peer-election-timeout: 2000
    peer-heartbeat-interval: 500

  units:
  # Fleet
  # Distribuited Scheduling Service
  - name: fleet.service
    command: start

  # NTP Time Server Configuration
  - name: ntpdate.service
    command: start
  - name: timedate-ntp-synchronization.service
    command: start
    content: |
      [Unit]
      Description=Synchronize system clock
      After=ntpdate.service

      [Service]
      ExecStart=/usr/bin/timedatectl set-timezone UTC
      ExecStart=/usr/bin/timedatectl set-ntp true
      ExecStart=/sbin/hwclock --systohc --utc
      RemainAfterExit=yes
      Type=oneshot

  # Etcd
  # Distribuited Key Value store
  # Masked and handled by the etcd proxy
  - name: etcd.service
    command: start
    content: |
      [Unit]
      Description=etcd
      [Service]
      User=etcd
      PermissionsStartOnly=true
      Environment=ETCD_DATA_DIR=/var/lib/etcd
      Environment=ETCD_NAME=%m
      ExecStart=/usr/bin/etcd
      Restart=always
      RestartSec=10s
      LimitNOFILE=40000

  # Increase number of connections
  - name: increase-nf_conntrack-connections.service
    command: start
    content: |
      [Unit]
      Description=Increase the number of connections in nf_conntrack. default is 65536

      [Service]
      Type=oneshot
      ExecStartPre=/usr/sbin/modprobe nf_conntrack
      ExecStart=/bin/sh -c "sysctl -w net.netfilter.nf_conntrack_max=262144"

  # Format the ephemeral volume
  - name: format-ephemeral-volume.service
    command: start
    content: |
      [Unit]
      Description=Formats the ephemeral volume
      ConditionPathExists=!/etc/ephemeral-volume-formatted

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/sbin/wipefs -f /dev/xvdb
      ExecStart=/usr/sbin/mkfs.ext4 -i 4096 -b 4096 /dev/xvdb
      ExecStart=/bin/touch /etc/ephemeral-volume-formatted

  # Mount the ephemeral volume
  - name: media-ephemeral.mount
    command: start
    content: |
      [Unit]
      Description=Formats and mounts the ephemeral drive
      Requires=format-ephemeral-volume.service
      After=format-ephemeral-volume.service

      [Mount]
      What=/dev/xvdb
      Where=/media/ephemeral
      Type=ext4

  # Format the docker volume
  - name: format-docker-volume.service
    command: start
    content: |
      [Unit]
      Description=Formats the added EBS volume for Docker
      ConditionPathExists=!/etc/docker-volume-formatted

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/sbin/wipefs -f /dev/xvdf
      ExecStart=/usr/sbin/mkfs.ext4 -i 4096 -b 4096 /dev/xvdf
      ExecStart=/bin/touch /etc/docker-volume-formatted

  # Mount the docker volume
  - name: var-lib-docker.mount
    command: start
    content: |
      [Unit]
      Description=Mount Docker volume to /var/lib/docker
      Requires=format-docker-volume.service
      After=format-docker-volume.service
      Before=docker.service
      [Mount]
      What=/dev/xvdf
      Where=/var/lib/docker
      Type=ext4

  # Deis ctl
  # Used to install and manage deis
  - name: install-deisctl.service
    command: start
    content: |
      [Unit]
      Description=Install deisctl utility
      ConditionPathExists=!/opt/bin/deisctl

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/sh -c 'curl -sSL --retry 5 --retry-delay 2 http://deis.io/deisctl/install.sh | sh -s {{deis_version}}'

  # Debug etcd
  - name: debug-etcd.service
    content: |
      [Unit]
      Description=etcd debugging service

      [Service]
      ExecStartPre=/usr/bin/curl -sSL -o /opt/bin/jq http://stedolan.github.io/jq/download/linux64/jq
      ExecStartPre=/usr/bin/chmod +x /opt/bin/jq
      ExecStart=/usr/bin/bash -c "while true; do curl -sL http://127.0.0.1:4001/v2/stats/leader | /opt/bin/jq . ; sleep 1 ; done"

  # Etcd data directory
  - name: prepare-etcd-data-directory.service
    command: start
    content: |
      [Unit]
      Description=Prepares the etcd data directory
      Requires=media-ephemeral.mount
      After=media-ephemeral.mount
      Before=etcd.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/bin/mkdir -p /media/ephemeral/etcd
      ExecStart=/usr/bin/chown -R etcd:etcd /media/ephemeral/etcd

write_files:
  - path: /etc/deis-release
    content: |
      DEIS_RELEASE=v{{deis_version}}

  - path: /etc/profile.d/nse-function.sh
    permissions: '0755'
    content: |
      function nse() {
        docker exec -it $1 bash
      }

  # Set the insecure registry
  - path: /etc/systemd/system/docker.service.d/50-insecure-registry.conf
    content: |
        [Service]
        EnvironmentFile=/etc/environment_proxy
        Environment="DOCKER_OPTS=--insecure-registry 10.0.0.0/8 --insecure-registry 172.16.0.0/12 --insecure-registry 192.168.0.0/16 --insecure-registry 100.64.0.0/10"

  # Deis image fetcher
  - path: /run/deis/bin/get_image
    permissions: '0755'
    content: |
      #!/bin/bash
      # usage: get_image <component_path>
      IMAGE=`etcdctl get $1/image 2>/dev/null`

      # if no image was set in etcd, we use the default plus the release string
      if [ $? -ne 0 ]; then
        RELEASE=`etcdctl get /deis/platform/version 2>/dev/null`

        # if no release was set in etcd, use the default provisioned with the server
        if [ $? -ne 0 ]; then
          source /etc/deis-release
          RELEASE=$DEIS_RELEASE
        fi

        IMAGE=$1:$RELEASE
      fi

      # remove leading slash
      echo ${IMAGE#/}

  - path: /opt/bin/deis-debug-logs
    permissions: '0755'
    content: |
      #!/bin/bash

      echo '--- VERSIONS ---'
      source /etc/os-release
      echo $PRETTY_NAME
      source /etc/deis-release
      echo "Deis $DEIS_RELEASE"
      etcd -version
      fleet -version
      printf "\n"

      echo '--- SYSTEM STATUS ---'
      journalctl -n 50 -u etcd --no-pager
      journalctl -n 50 -u fleet --no-pager
      printf "\n"

      echo '--- DEIS STATUS ---'
      deisctl list
      etcdctl ls --recursive /deis
      printf "\n"

  - path: /home/core/.toolboxrc
    owner: core
    content: |
      TOOLBOX_DOCKER_IMAGE=ubuntu-debootstrap
      TOOLBOX_DOCKER_TAG=14.04
      TOOLBOX_USER=root

  - path: /etc/environment_proxy
    owner: core
    content: |
      HTTP_PROXY=
      HTTPS_PROXY=
      ALL_PROXY=
      NO_PROXY=
      http_proxy=
      https_proxy=
      all_proxy=
      no_proxy=

  - path: /etc/systemd/coredump.conf
    content: |
      [Coredump]
      Storage=none

  - path: /etc/profile.d/bash-function.sh
    permissions: '0755'
    content: |
      alias l.='ls -d .*'
      alias ll='ls -al'
      alias jc='journalctl'
      alias flu='fleetctl list-units'
      alias fluf='fleetctl list-unit-files'
      alias flm='fleetctl list-machines'
      alias wetcd='watch -n1 etcdtcl ls / --recursive'
      alias ss='sudo systemctl'
      alias elr='etcdctl ls --recursive'
      alias sysdig='docker exec -it sysdig sysdig'
      alias spectogram='docker exec -it sysdig sysdig -c spectrogram 200'
      function etcdctl2()
      {
        docker exec -it etcd /etcdctl --peers=http://127.0.0.1:2379 "$@";
      }
